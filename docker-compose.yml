services:
  # PostgreSQL Database (тестовая база)
  postgres:
    image: postgres:15
    container_name: dance-postgres-local
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C --auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-config/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dance_app"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - dance-network

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    container_name: dance-auth-service-local
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_ENDPOINT=${DB_ENDPOINT}
      - DB_NAME=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - RATE_LIMIT_LOGIN=${RATE_LIMIT_LOGIN}
      - RATE_LIMIT_REGISTER=${RATE_LIMIT_REGISTER}
      - SQLALCHEMY_ECHO=${SQLALCHEMY_ECHO}
      - TESTING_MODE=${TESTING_MODE}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - AUTO_CREATE_ADMIN=${AUTO_CREATE_ADMIN}
      - INTERNAL_AUTH_TOKEN=${INTERNAL_AUTH_TOKEN}
      - SERVICE_TOKEN_EXPIRE_MINUTES=${SERVICE_TOKEN_EXPIRE_MINUTES}
      - SERVICE_JWT_SECRET=${SERVICE_JWT_SECRET}
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dance-network

  # Schedule Service
  schedule-service:
    build:
      context: .
      dockerfile: services/schedule/Dockerfile
    container_name: dance-schedule-service-local
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_ENDPOINT=${DB_ENDPOINT}
      - DB_NAME=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SQLALCHEMY_ECHO=${SQLALCHEMY_ECHO}
      - SERVICE_TOKEN_EXPIRE_MINUTES=${SERVICE_TOKEN_EXPIRE_MINUTES}
      - SERVICE_JWT_SECRET=${SERVICE_JWT_SECRET}
      - INTERNAL_AUTH_TOKEN=${INTERNAL_AUTH_TOKEN}
    ports:
      - "8002:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dance-network

  # Booking Service
  booking-service:
    build:
      context: .
      dockerfile: services/booking/Dockerfile
    container_name: dance-booking-service-local
    environment:
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_ENDPOINT=${DB_ENDPOINT}
      - DB_NAME=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - SCHEDULE_SERVICE_URL=${SCHEDULE_SERVICE_URL}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SQLALCHEMY_ECHO=${SQLALCHEMY_ECHO}
      - SERVICE_TOKEN_EXPIRE_MINUTES=${SERVICE_TOKEN_EXPIRE_MINUTES}
      - SERVICE_JWT_SECRET=${SERVICE_JWT_SECRET}
      - INTERNAL_AUTH_TOKEN=${INTERNAL_AUTH_TOKEN}
    ports:
      - "8003:8000"
    depends_on:
      postgres:
        condition: service_healthy
      schedule-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dance-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dance-frontend-local
    ports:
      - "80:80"
    depends_on:
      - auth-service
      - schedule-service
      - booking-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - dance-network
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - NGINX_PORT=${NGINX_PORT}

volumes:
  postgres_data:
    driver: local

networks:
  dance-network:
    driver: bridge 